TO DO/Consider: 
-rename isolinux/ and isolinux.cfg to syslinux/ and syslinux.cfg
-format the usb (SD card) and give it a bootable flag with fdisk, creating proper filesystem and dd-ing
-consider just using mkusb????

Expected high level flow:
    1. clone down iso
    2. mount iso and copy to a new working dir
    3. edit the iso grub.cfg
    4. add a custom preseed file to the boot directory
    5. make the new iso
    6. fdisk the usb/sd if necessary
    7. create the right filesystems we need
    8. dd-ing the iso to the sd/usb
    9. repeat 6-8 for all 7 SDs





#step 1: download the iso

$ wget https://releases.ubuntu.com/jammy/ubuntu-22.04-desktop-amd64.iso

#step 2: mount the ubuntu ISO to copy contents to another directory and edit files where appropriate

$ sudo mkdir -p /mnt/iso
$ sudo mount -o loop ubuntu-22.04-desktop-amd64.iso /mnt/iso

#step 3: copy iso files to another dir for editing

$ mkdir -p /opt/ubuntuiso
$ cp -rT /mnt/iso /opt/ubuntuiso

#step 4: replace the /opt/ubuntuiso/boot/grub/grub.cfg file with the following. edit preseed & kickstart filename appropriately

$ cd /opt/ubuntuiso/boot/grub
$ sudo vim grub.cfg

#start grub.cfg

if loadfont /boot/grub/font.pf2 ; then
    set gfxmode=auto
    insmod efi_gop
    insmod efi_uga
    insmod gfxterm
    terminal_output gfxterm
fi

set menu_color_normal=white/light-blue
set menu_color_highlight=light-blue/light-gray
set timeout=10
set default=0

menuentry "Automatically Install Ubuntu with Custom Config" {
    set gfxpayload=keep
    linux   /install/vmlinuz  file=/opt/ubuntuiso/preseed/ubuntu.seed auto=true automatic-ubiquity toram quiet ks=opt/ubuntuiso/preseed/ks.cfg preseed/file=/opt/ubuntuiso/preseed/ks.preseed --
    initrd  /install/initrd.gz
}
	
#end grub.cfg	
	
#step 5: create the preseed file. It should be named ks.preseed as per the designation in step 4 and it should be in the top level dir of the ISO (/opt/ubuntuiso). Any custom command to run after installation should use 
# $ubiquity ubiquity/success_command string 
# followed by the command 
# strings below with ':\' and '/target' change anything pertaining to the new system
# also need to add user/root password
# designate users groups if applicable
# change the success_command 

# Partitioning
# Old style using d-i command
#d-i partman-auto/disk string /dev/sda
#d-i partman-auto/method string regular
#d-i partman-lvm/device_remove_lvm boolean true
#d-i partman-md/device_remove_md boolean true
#d-i partman-auto/choose_recipe select atomic

# Newer ubiquity command
ubiquity partman-auto/disk string /dev/sda
ubiquity partman-auto/method string regular
ubiquity partman-lvm/device_remove_lvm boolean true
ubiquity partman-md/device_remove_md boolean true
ubiquity partman-auto/choose_recipe select atomic

# This makes partman automatically partition without confirmation
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true

# Locale
d-i debian-installer/locale string en_US
d-i console-setup/ask_detect boolean false
d-i console-setup/layoutcode string us

# Network
d-i netcfg/get_hostname string unassigned-hostname
d-i netcfg/get_domain string unassigned-domain
d-i netcfg/choose_interface select auto

# Clock
d-i clock-setup/utc-auto boolean true
d-i clock-setup/utc boolean true
d-i time/zone string US/Pacific
d-i clock-setup/ntp boolean true

# Packages, Mirrors, Image
d-i mirror/country string US
d-i apt-setup/multiverse boolean true
d-i apt-setup/restricted boolean true
d-i apt-setup/universe boolean true

# Users
d-i passwd/user-fullname string User
d-i passwd/username string user
d-i passwd/user-password-crypted password yourEncryptedPasswd
d-i passwd/user-default-groups string adm audio cdrom dip lpadmin sudo plugdev sambashare video
d-i passwd/root-login boolean true
d-i passwd/root-password-crypted password rootEncryptedPasswd
d-i user-setup/allow-password-weak boolean true

# Grub
d-i grub-installer/grub2_instead_of_grub_legacy boolean true
d-i grub-installer/only_debian boolean true
d-i finish-install/reboot_in_progress note

# Custom Commands
ubiquity ubiquity/success_command string \
  sed -i -e 's/dns=dnsmasq/#dns=dnsmasq/' /target/etc/NetworkManager/NetworkManager.conf ;\
  cp -a /cdrom/scripts/ /target/root/ ;\
  cp -a /cdrom/salt/ /target/root/

#due to potential USB sticks, the location of the MBR can not be determined safely so this #must be specified
d-i grub-installer/bootdev string /dev/sda

#to install to the first device (assuming its not a usb stick):
#d-i grub-installer/bootdev string default

#end of preseed


#step 6: create a new ISO from the /opt/ubuntuiso/ dir The below is likely a deprecated example given that isolinux is no longer used

#$ mkisofs -D -r -V ATTENDLESS_UBUNTU -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o /opt/autoinstall.iso /opt/ubuntuiso
#no idea what all of the above flags do, i just ran...
$ sudo mkisofs unattended.iso /opt/ubuntuiso


#step 7: find the current drives available

$ ls -l /dev/sd?

#7.A: insert SD/USB

#7.B: find the current drive pertaining to the inserted SD/USB, will appear as a new location after running below commmand

$ ls -l /dev/sd?


#step 8: dd the newly created iso to the target device these are just an example source and target and eventually bash script should find this dynamically
$ dd if=unattended.iso |pv | sudo dd of=/dev/sdb

#above pv is a pipe viewer app that will show current speed and transfer volume, sudo apt get-install pv 